#!/bin/sh

YTFZF_VERSION="2.0_alpha"

# Scraping: query -> video json
# User Interface: video json -> user selection -> ID
# Player: ID -> video player

# Utility functions {{{
dep_check() {
	command -v "$1" > /dev/null 2>&1
}

function_exists () {
	type "$1" > /dev/null 2>&1
}


print_info () {
	# information goes to stdout ( does not disturb show_link_only )
	printf "$1" >&2
}

clean_up () {
	# print_info "cleaning up\n"
	# clean up only as parent process
	if [ "$YTFZF_PID" = "$$" ]; then
		[ -d "$session_cache_dir" ] && rm -r "$session_cache_dir"
	fi
}

die () {
	_return_status=$1
	printf "$2" >&2
	exit "$_return_status"
}

trim_id () {
	while IFS= read _line;do
		printf '%s\n' "${_line##*|}"
	done
}

search_is_empty () {
	case "$search" in
		-|'') return 0 ;;
	esac
	return 1
}

# Traps {{{
[ -z "$UEBERZUG_FIFO" ] && trap 'clean_up' EXIT
[ -z "$UEBERZUG_FIFO" ] && trap 'exit' INT TERM HUP
#}}}

# }}}

# Global Variables and Start Up {{{

#configuration handling {{{
: "${YTFZF_CONFIG_DIR:=$HOME/.config/ytfzf}"
: "${YTFZF_CONFIG_FILE:=$YTFZF_CONFIG_DIR/conf.sh}"
: "${YTFZF_SUBSCRIPTIONS_FILE:=$YTFZF_CONFIG_DIR/subscriptions}"

[ -f "$YTFZF_CONFIG_FILE" ] && . "$YTFZF_CONFIG_FILE"
#}}}

# Custom Scrapers {{{
: "${YTFZF_CUSTOM_SCRAPERS_DIR:=$YTFZF_CONFIG_DIR/scrapers}"
: "${custom_scraper_variables=}"
#}}}

: ${useragent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Safari/537.36'}
: ${cache_dir=$HOME/.cache/ytfzf}

# menu options
#the menu to use instead of fzf when -D is specified
function_exists "external_menu" || external_menu () {
	dmenu -i -l 30 -p Search:
}

function_exists "search_prompt_menu" || search_prompt_menu () {
	if [ $is_ext_menu -eq 1 ]; then
		search="$(printf '' | external_menu)"
	else
		printf "Search: "
		read -r search
	fi
}

#number of columns (characters on a line) the external menu can have
: ${external_menu_len=210}

: ${is_loop:=0}

# Players
function_exists "video_detach_player" || video_detach_player () {
	setsid -f mpv --ytdl-format="$video_pref" "$@" 1>/dev/null 2>&1
}
function_exists "video_player" || video_player () {
	mpv --ytdl-format="$video_pref" "$@"
}
function_exists "audio_player" || audio_player () {
       	mpv --no-video "$@"
}
function_exists "downloader" || downloader () {
	case $is_audio_only in
	    0) ${ytdl_path:-youtube-dl} -f "${video_pref}" $ytdl_opts "$@"	;;
	    1) ${ytdl_path:-youtube-dl} -x $ytdl_opts "$@" ;;
	esac
}

# directories
: ${cache_dir=$HOME/.cache/ytfzf}

# format options
#variable for switching on sort (date)
: ${is_detach=0}
: ${is_audio_only=0}
: ${is_download=0}
: ${info_to_print=}
: ${video_pref=best}

: ${is_sort=0}
: ${show_thumbnails=0}
: ${is_ext_menu=0}

: ${is_interface_scripting=0}
: ${scripting_video_count=1}
: ${is_auto_select=0}
: ${is_random_select=0}

# option parsing
: ${long_opt_char:=-}

# scrape
: ${scrape=youtube}
: ${sub_link_count=10}

# Option Checks {{{
case "$long_opt_char" in
        [a-uw-zA-UW-Z0-9]) print_info "long_opt_char must be v or non alphanumeric" && die 1 ;;
	#? = 1 char, * = 1+ chars; ?* = 2+ chars
	??*) print_info "long_opt_char must be 1 char" && die 1 ;;
esac
#}}}

tab_space=$(printf '\t')
gap_space="                                                                   "

# colors {{{
c_red="\033[1;31m"
c_green="\033[1;32m"
c_yellow="\033[1;33m"
c_blue="\033[1;34m"
c_magenta="\033[1;35m"
c_cyan="\033[1;36m"
c_reset="\033[0m"
#}}}

# }}}

usage () {
	printf "%s" \
"Usage: ytfzf [OPTIONS...] <search-query>
    If search-query is -, stdin will be read as the search query
    OPTIONS:
	-h			Show this help text
	-d			Download the selected video(s)
	-m			Only play audio
	-l                      Reopen the menu when the video stops playing
	-L			Show the link of selected video(s)
	-c <scraper>       	The scraper to use,
				Builtin scrapers:
				    youtube/Y, youtube-trending/T, youtube-subscriptions/S,
				    peertube/P, odysee/lbry/O
				you can use multiple scrapers by separating each with a , eg: youtube,odysee
	-t			Show thumbnails
	-D			Use an external menu
	-I <info>               Instead of playing the selected video(s), get information about them.
				Options can be separated with a comma, eg: L,R
	                        Options for info:
				    L:         print the link of the video
				    VJ:        print the json of the video
				    J:         print the json of all videos shown in the search
				    R:         print the data of the selected videos, as appears in the menu
				
"
}


# Scraping {{{
# * a scraper function takes a search query as $1 and returns video json to file $2
# * argument 3 and above are undefined and can be used for filters
# * return codes:
#            1 : no response from site

# Json keys:
#	Needed:
#	ID url title
#	Optional:
#	thumbs channel duration views date description


## Youtube {{{
_youtube_get_request () {
	_base_url=$1
	_query=$2
	_sp=$3
	# Get search query from youtube
	curl "$_base_url" -s -L \
	  -G --data-urlencode "search_query=$_query" \
	  --data-urlencode "sp=$_sp" \
	  -H 'Authority: www.youtube.com' \
	  -H "User-Agent: $useragent" \
	  -H 'Accept-Language: en-US,en;q=0.9' \
	  --compressed
}
_youtube_get_json () {
	# Separates the json embedded in the youtube html page
	# * removes the content after ytInitialData
	# * removes all newlines and trims the json out
	sed -n '/var *ytInitialData/,$p' |
		tr -d '\n' |
		sed -E ' s_^.*var ytInitialData ?=__ ; s_;</script>.*__ ;'
}

# Search Related functions {{{
_youtube_search_json_playlist () {
	jq '[ .contents|
	..|.playlistRenderer? |
	select(. !=null) |
		{
			ID: .playlistId,
			url: "https://www.youtube.com/playlist?list=\(.playlistId)",
			title: "[Playlist] \(.title.simpleText)",
			thumbs: .thumbnails[0].thumbnails[0].url|sub("\\?.*";""),
			channel: .longBylineText.runs[0].text,
			duration: "\(.videoCount) videos",
			views: "playlist",
			date: "playlist"
		}
	]'
}
_youtube_search_json_videos () {
	jq '[ .contents| ..|.videoRenderer? | select(. !=null) |
		{
			ID: .videoId,
			url: "https://www.youtube.com/watch?v=\(.videoId)",
			title: .title.runs[0].text,
			channel: .longBylineText.runs[0].text,
			thumbs: .thumbnail.thumbnails[0].url|sub("\\?.*";""),
			duration:.lengthText.simpleText,
			views: .shortViewCountText.simpleText,
			date: .publishedTimeText.simpleText,
			description: .detailedMetadataSnippets[0].snippetText.runs[0].text
		}
	]'
}
_youtube_get_sp_filter () {
	if [ -n "$sp" ]; then
		#youtube puts in %253d one ore more times in the filter id, it doesn't seem useful, so we are removing it if it's in the filter
		sp=${sp%%%*}
		return
	fi

	sort_by_filter=$1
	upload_date_filter=$2

	#filter_id is a variable that keeps changing throught this function
	filter_id=

	#sp is the final filter id that is used in the search query
	sp=

	#the way youtube uses these has a pattern, for example
	    #in the sort_by_filter the only difference is the 3rd character, I just don't know how to use this information efficiently
	case $sort_by_filter in
		upload-date) filter_id="CAISBAgAEAE" ;;
		view-count) filter_id="CAMSBAgAEAE" ;;
		rating) filter_id="CAESBAgAEAE" ;;
	esac

	#another example is sort by filter + upload date filter only changes one character as well
	if [ -n "$filter_id" ]; then
		#gets the character in the filter_id that needs to be replaced if upload_date_filter is also given
		upload_date_character=$(printf "%s" "$filter_id" | awk '{print substr($1, 8, 1)}')
	fi

	#For each of these, if upload_date_character is unset, the filter_id should be the normal filter
	#Otherwise set the upload_date_character to the right upload_date_character
	case $upload_date_filter in
		last-hour)
			[ -z "$upload_date_character" ] && filter_id="EgQIARAB" || upload_date_character="B" ;;
		today)
			[ -z "$upload_date_character" ] && filter_id="EgQIAhAB" || upload_date_character="C" ;;
		this-week)
			[ -z "$upload_date_character" ] && filter_id="EgQIAxAB" || upload_date_character="D" ;;
		this-month)
			[ -z "$upload_date_character" ] && filter_id="EgQIBBAB" || upload_date_character="E" ;;
		this-year)
			[ -z "$upload_date_character" ] && filter_id="EgQIBRAB" || upload_date_character="F" ;;
	esac

	#if upload_date_character isn't empty, set sp to upload_date filter + sort_by filter
	if [ -n "$upload_date_character" ]; then
		#replaces the 8th character in the filter_id with the appropriate character
		#the 8th character specifies the upload_date_filter
		sp=$(printf "%s" "$filter_id" | sed 's/\(.\{7\}\)./\1'"$upload_date_character"'/')
	#otherwise set it to the filter_id
	else
		sp=$filter_id
	fi
	unset upload_date_character filter_id
}
#}}}

# Channel Related functions {{{
_youtube_channel_name () {
	# takes channel page html (stdin) and returns the channel name
	grep -o '<title>.*</title>' |
		sed \
		-e 's/ - YouTube//' \
		-e 's/<\/\?title>//g' \
		-e "s/&apos;/'/g" \
		-e "s/&#39;/'/g" \
		-e "s/&quot;/\"/g" \
		-e "s/&#34;/\"/g" \
		-e "s/&amp;/\&/g" \
		-e "s/&#38;/\&/g"
}
_youtube_channel_json () {
	channel_name=$1
	jq '[ .contents | ..|.gridVideoRenderer? | select(. !=null) |
	    {
	    	ID: .videoId,
			url: "https://www.youtube.com/watch?v=\(.videoId)",
	    	title: .title.runs[0].text,
	    	channel: "'"$channel_name"'",
	    	thumbs: .thumbnail.thumbnails[0].url|sub("\\?.*";""),
	    	duration:.thumbnailOverlays[0].thumbnailOverlayTimeStatusRenderer.text.simpleText,
	    	views: .shortViewCountText.simpleText,
	    	date: .publishedTimeText.simpleText,
	    }
	]'
}
#}}}

scrape_youtube () {
	page_query=$1
	output_json_file=$2
	pagetype=$3

	_tmp_html="${session_temp_dir}/yt.html"
	_tmp_json="${session_temp_dir}/yt.json"

	case $pagetype in
		''|search)
			print_info "Scraping YouTube\n"
			# TODO: sp
			_youtube_get_request "https://www.youtube.com/results" "$page_query" > "$_tmp_html"

			_youtube_get_json < "$_tmp_html" > "$_tmp_json"

			{
				_youtube_search_json_playlist < "$_tmp_json"
				_youtube_search_json_videos < "$_tmp_json"
			} >> "$output_json_file"
			;;
		trending)
			print_info "Scraping YouTube trending\n"
			trending_tab=$page_query

			case $trending_tab in
				 music) tab_data="4gINGgt5dG1hX2NoYXJ0cw%3D%3D" ;;
				gaming) tab_data="4gIcGhpnYW1pbmdfY29ycHVzX21vc3RfcG9wdWxhcg%3D%3D" ;;
				movies) tab_data="4gIKGgh0cmFpbGVycw%3D%3D" ;;
			esac

			_youtube_get_request "https://www.youtube.com/feed/trending?bp=$tab_data" "" "" > "$_tmp_html"

			_youtube_get_json < "$_tmp_html" > "$_tmp_json"
			{
				_youtube_search_json_videos < "$_tmp_json"
				_youtube_search_json_playlist < "$_tmp_json"
			} >> "$output_json_file"
			;;
		channel)
			print_info "Scraping YouTube channel\n"
			channel_url=$page_query
			#if these 2 vars aren't unique, weird things happen,
			# i is defined in at the while loop for scraping channels
			# it may be better to instead make this channel part it's own function, and pass a var for the tmp files
			_tmp_html="${session_temp_dir}/channel-$i.html"
			_tmp_json="${session_temp_dir}/channel-$i.json"

			# Converting channel title page url to channel video url
			case $channel_url in
				*featured)
				channel_url=${channel_url%featured}videos
					;;
			esac

			_youtube_get_request "$channel_url" "" "" > "$_tmp_html"
			_youtube_get_json < "$_tmp_html" > "$_tmp_json"

			channel_name=$(_youtube_channel_name < "$_tmp_html" )
			_youtube_channel_json "$channel_name" < "$_tmp_json"  >> "$output_json_file"
			;;
	esac

}
## }}}

## Peertube {{{
scrape_peertube () {
	print_info "Scraping Peertube\n"
	page_query=$1
	output_json_file=$2

	_tmp_json="${session_temp_dir}/peertube.json"

	#gets a list of videos
	curl -s "https://sepiasearch.org/api/v1/search/videos" \
	  -G --data-urlencode "search=$1" > "$_tmp_json"

	jq '[ .data | .[] |
			{
				ID: .uuid,
				url: .url,
				title: .name,
				channel: .channel.displayName,
				thumbs: .thumbnailUrl,
				duration: "\(.duration / 60 | floor):\(.duration % 60)",
				views: .views,
				date: .publishedAt
			}
		]' < "$_tmp_json" >> "$output_json_file"

}
## }}}

## Odysee {{{
scrape_odysee () {
	print_info "Scraping Odysee\n"
	page_query=$1
	output_json_file=$2

	_tmp_json="${session_temp_dir}/odysee.json"

	# TODO: filters
	curl \
	    -s "https://lighthouse.lbry.com/search" \
	    -G --data-urlencode "s=$page_query" \
	    --data-urlencode "mediaType=video,audio" \
	    --data-urlencode "include=channel,title,thumbnail_url,duration,cq_created_at,description,view_cnt" \
	    --data-urlencode "size=$odysee_video_search_count" > "$_tmp_json"

	jq '[ .[] |
	    {
			ID: .claimId,
			title: .title,
			url: "https://www.odysee.com/\(.channel)/\(.name)",
			channel: .channel,
			thumbs: .thumbnail_url,
			duration: "\(.duration / 60 | floor):\(.duration % 60)",
			views: "\(.view_cnt)",
			date: .cq_created_at
	    }
	]' < "$_tmp_json" >> "$output_json_file" 
	# TODO:  error handling 2 character

}
## }}}


# }}}

# Sorting {{{

function_exists "get_sort_by" || get_sort_by () {
    line="$1"    
    date="${line%|*}"
    date=${date##*|}
    #youtube specific
    date=${date#*Streamed}
    date=${date#*Premiered}
    date -d "$date" '+%s' 2>/dev/null || date -f "$date" '+%s' 2> /dev/null || printf "null"
    unset line
}

function_exists "data_sort_fn" || data_sort_fn () {
    sort -nr
}

sort_video_data_fn () {
	if [ $is_sort -eq 1 ]; then
		while IFS= read -r line
		do
			#run the key function to get the value to sort by
			get_sort_by "$line" | tr -d '\n'
			printf "\t%s\n" "$line"
		done | data_sort_fn | cut -f2-
	else
		cat
	fi
}
#}}}

# User Interface {{{
# Takes video json file as $1 and returns the selected video IDs to file $2
video_info_text () {
	printf "%-${title_len}.${title_len}s\t" "$title"
	printf "%-${channel_len}.${channel_len}s\t" "$channel"
	printf "%-${dur_len}.${dur_len}s\t" "$duration"
	printf "%-${view_len}.${view_len}s\t" "$views"
	printf "%-${date_len}.${date_len}s\t" "$date"
	printf "%s" "$shorturl"
	printf "\n"
}

thumbnail_video_info_text () {
	printf "\n ${c_cyan}%s" "$title"
	printf "\n ${c_blue}Channel  ${c_green}%s" "$channel"
	printf "\n ${c_blue}Duration ${c_yellow}%s" "$duration"
	printf "\n ${c_blue}Views    ${c_magenta}%s" "$views"
	printf "\n ${c_blue}Date     ${c_cyan}%s" "$date"
	printf "\n ${c_blue}Description ${c_reset}: %s" "$description"
}

# Scripting interfaces {{{
interface_scripting () {
	video_json_file=$1
	selected_id_file=$2
	case 1 in
		"$is_auto_select")
		jq -r '.[]|.ID' < "$video_json_file"  | head -n "$scripting_video_count" > "$selected_id_file"
			;;
		"$is_random_select")
		jq -r '.[]|.ID' < "$video_json_file"  | shuf | head -n "$scripting_video_count" > "$selected_id_file"
			;;
	esac
	# jq '.[]' < "$video_json_file" | jq -s -r --arg N "$scripting_video_count" '.[0:$N|tonumber]|.[]|.ID' > "$selected_id_file"
}
# }}}

# Text interface {{{
interface_text () {
	video_json_file=$1
	selected_id_file=$2

	# video_info_text can be set in the conf.sh, if set it will be preferred over the default given below
	TTY_COLS=$(tput cols)
	title_len=$((TTY_COLS/2))
	channel_len=$((TTY_COLS/5))
	dur_len=7
	view_len=10
	date_len=100

	jq -r '.[]|"\(.title)\t|\(.channel)\t|\(.duration)\t|\(.views)\t|\(.date)\t|\(.ID)"' < "$video_json_file" |
		sort_video_data_fn |
		while IFS=$tab_space read title channel duration views date shorturl
		do
			video_info_text
		done |
		column -t -s "$tab_space" |
		fzf -m --tabstop=1 --layout=reverse |
		trim_id > "$selected_id_file"
}
#}}}

# External interface {{{
interface_external () {
	video_json_file=$1
	selected_id_file=$2

	# video_info_text can be set in the conf.sh, if set it will be preferred over the default given below
	TTY_COLS=$external_menu_len
	title_len=$((TTY_COLS/2))
	channel_len=$((TTY_COLS/5))
	dur_len=7
	view_len=10
	date_len=100

	jq -r '.[]|"\(.title)\t|\(.channel)\t|\(.duration)\t|\(.views)\t|\(.date)\t|\(.ID)"' < "$video_json_file" |
		sort_video_data_fn |
		while IFS=$tab_space read title channel duration views date shorturl
		do
			video_info_text
		done | tr -d "$tab_space" |
		external_menu |
		trim_id > "$selected_id_file"
}
#}}}

# Thumbnail Interface {{{

# Image preview {{{
preview_start () {
	thumbnail_viewer=$1
	case $thumbnail_viewer in
		ueberzug)
			# starts uberzug to this fifo
			export UEBERZUG_FIFO="/tmp/ytfzf-ueberzug-fifo"
			rm -f "$UEBERZUG_FIFO"
			mkfifo "$UEBERZUG_FIFO"
			ueberzug layer --parser simple < "$UEBERZUG_FIFO" 2>/dev/null &
			exec 3> "$UEBERZUG_FIFO" # to keep the fifo open
			;;
	esac
}
preview_stop () {
	thumbnail_viewer=$1
	case $thumbnail_viewer in
		ueberzug)
			exec 3>&- # close file descriptor 3, closing ueberzug
			;;
	esac
}
preview_display_image () {
	thumbnail_viewer=$1
	id=$2
	case $thumbnail_viewer in
		ueberzug)
			printf '%s\t' \
				'action' 'add' \
				'identifier' 'ytfzf' \
				'path' "$thumb_dir/${id}.jpg" \
				'x' '2' \
				'y' '10' \
				'scaler' 'fit_contain' \
				'width' "$((FZF_PREVIEW_COLUMNS))" > "$UEBERZUG_FIFO"
			printf '%s\t%s\n' \
				'height' "$((FZF_PREVIEW_LINES-10))" > "$UEBERZUG_FIFO"
			;;
	esac
}
#}}}

preview_img () {
	# This function is common to every thumbnail viewer
	thumbnail_viewer=$1
	line=$2
	video_json_file=$3
	id=${line##*|}

	IFS=$tab_space read -r title channel duration views date description <<-EOF
	$(
		jq -r --arg id "$id" '.[]|select( .ID == $id )|
			[.title,.channel,.duration,.views,.date,.description]|
			@tsv' < "$video_json_file"
	)
	EOF

	thumbnail_video_info_text "$id"
	preview_display_image "$thumbnail_viewer" "$id"
}

interface_thumbnails () {
	# Takes video json file and downloads the thumnails as ${ID}.png to thumb_dir
	video_json_file=$1
	selected_id_file=$2

	# Download thumbnails, only if they're not already downloaded
	find "$thumb_dir" -type d -empty | grep -q "$thumb_dir" && {
		print_info 'Fetching thumbnails...\n'
		curl_config_file="${session_temp_dir}/curl_config"
		jq -r '.[]|"
			url = \"\(.thumbs)\"
			output = \"'"$thumb_dir"'/\(.ID).jpg\""' \
				< "$video_json_file" > "$curl_config_file"
			# curl version > 7.66.0 ( else remove -Z )
			curl -Z -K "$curl_config_file" || curl -K "$curl_config_file"
	}

	thumbnail_viewer=ueberzug

	preview_start "$thumbnail_viewer"

	# ytfzf -U preview_img ueberzug {} "$video_json_file"
	jq -r '.[]|[.title,"'"$gap_space"'|"+.channel,"|"+.duration,"|"+.views,"|"+.date,"|"+.ID]|@tsv' < "$video_json_file" |
	sort_video_data_fn |
	fzf -m \
	--preview "sh $0 -U preview_img '""$thumbnail_viewer""' {} '""$video_json_file""'" \
	--preview-window "left:50%:wrap" --layout=reverse |
	trim_id > "$selected_id_file"

	preview_stop "$thumbnail_viewer"
}
#}}}

#}}}

# Player {{{
print_requested_info () {
    set -f
    IFS=,
    for request in $info_to_print; do
	case "$request" in
	    [Ll]|link) printf '%s\n' "$@" ;;
	    VJ|vj|video-json) while read -r line; do jq '.[]|select(.ID=="'"$line"'")' < "$video_json_file"; done < "$id_file" ;;
	    [Jj]|json) jq < "$video_json_file" ;;
	    [Rr]|raw) while read -r line; do jq -r '.[]|select(.ID=="'"$line"'")|"\(.title)\t|\(.channel)\t|\(.duration)\t|\(.views)\t|\(.date)\t|\(.ID)"' < "$video_json_file"; done < "$id_file" ;;
	esac
    done
}

open_player () {
	# isaudio, isdownload, video_pref

	if [ -n "$info_to_print"  ]; then
		print_requested_info "$@"
		return
	fi

	: ${video_pref:=best}


	if [ $is_download -eq 1 ]; then
		print_info "Downloading $# video(s)\n"
		downloader "$@"
		return
	fi

	print_info "Playing $# video(s)\n"

	if [ $is_audio_only -eq 1 ]; then
		audio_player "$@"
		return
	fi

	if [ $is_detach -eq 1 ]; then
		video_detach_player "$@"
		return
	fi

	video_player "$@"
}

player () {
	# takes the json data file as $1 and the selected id file as $2
	video_json_file=$1
	id_file=$2
	options=$3

	{
		# get urls from the ids
		urls=
		while IFS= read id || [ -n "$id" ] ; do
			# head is used so that only url is selected (a search query may have dublicates)
			urls=${urls}' '$(jq -r --arg id "$id" '.[]|select(.ID == $id).url' < "$video_json_file" | head -n 1 )
		done < "$id_file"
		[ -z "$urls" ] && return
	}

	unset IFS
	set -f
	set -- $urls
	open_player "$@"
}
#}}}

# Options {{{
parse_opt () {
	opt=$1
	optarg=$2
	#for some reason optarg may equal opt intentionally,
	#this checks the unmodified optarg, which will only be equal if there is no = sign
	[ "$opt" = "$OPTARG" ] && optarg=""
	case $opt in
		h|help) usage; exit ;;
		D|external-menu) is_ext_menu=${optarg:-1}; [ $is_ext_menu -eq 1 ] && show_thumbnails=0 ;;
		m|audio-only) is_audio_only=${optarg:-1} ;;
		d|download) is_download=${optarg:-1} ;;
		f|formats) : ;; # TODO
		H|history) : ;; # TODO
		x|history-clear) : ;; # TODO
		q|search-history) : ;; # TODO
		a|auto-select) is_interface_scripting=${optarg:-1}; is_auto_select=${optarg:-1} ;;
		A|select-all) is_interface_scripting=${optarg:-1}; is_auto_select=${optarg:-1}; scripting_video_count=100 ;;
		r|random-select) is_interface_scripting=${optarg:-1};is_random_select=${optarg:-1} ;; 
		n|link-count) scripting_video_count=$optarg;; 
		l|loop) is_loop=${optarg:-1} ;;
		t|show-thumbnails) show_thumbnails=${optarg:-1}; [ $show_thumbnails -eq 1 ] && is_ext_menu=0 ;;
		v) printf 'ytfzf: %s \n' "$YTFZF_VERSION"; exit;;
		L) info_to_print="$info_to_print,L" ;;
		c|scrape) scrape=$optarg ;;
		scrape+) scrape="$scrape,$optarg" ;;
		scrape-) scrape="$(printf '%s' "$scrape" | sed 's/'"$optarg"'//; s/,,/,/g')" ;;
		I) info_to_print=$optarg ;;
		#long-opt exclusives
		sort) is_sort=${optarg:-1} ;;
		video-pref) video_pref=$optarg ;;
		detach) is_detach=${optarg:-1} ;;
		ytdl-opts) ytdl_opts="$optarg" ;;
		ytdl-path) ytdl_path="$optarg" ;;
	esac
	function_exists "on_opt_parse" && on_opt_parse "$opt" "$optarg" "$OPT" "$OPTARG"
}

while getopts "hlan:dmfc:tI:LTD${long_opt_char}:U" OPT; do
	case $OPT in
		U)
			shift $((OPTIND-1))
			case $1 in
				preview_img)
					session_cache_dir=$cache_dir/$SEARCH_PREFIX-$YTFZF_PID
					thumb_dir=$session_cache_dir/thumbnails
					shift
					preview_img "$@"
					;;
			esac
			exit
			;;
		"$long_opt_char")
			parse_opt "${OPTARG%%=*}" "${OPTARG#*=}" ;;
		*)
			parse_opt "${OPT}" "${OPTARG}" ;;
	esac
done
shift $((OPTIND-1))
#}}}

# Get search{{{
search="$*"
get_search () {
	case "$search" in
		-) print_info "Reading stdin\n"; read -r search ;;
		'') search_prompt_menu ;;
	esac
}
#}}}

# Sessions {{{

# each session has its own cache dir in cache_dir
# YTFZF_PID: the pid of parent
if [ -z "$YTFZF_PID" ]; then
	YTFZF_PID=$$
	SEARCH_PREFIX=$(printf "%s" "$search" | tr '/' '_')
	export YTFZF_PID
	export SEARCH_PREFIX
	session_cache_dir="${cache_dir}/${SEARCH_PREFIX}-${YTFZF_PID}"
	session_temp_dir="${session_cache_dir}/tmp"
	thumb_dir="${session_cache_dir}/thumbnails"
	mkdir -p "$session_temp_dir" "$thumb_dir"
fi

# files
: ${ytfzf_selected_ids=$session_cache_dir/ids}
: ${ytfzf_video_json_file=$session_cache_dir/videos_json}

# }}}

# Main {{{

: > "$ytfzf_video_json_file"
: > "$ytfzf_selected_ids"

scrape_website () {
	scrape_type="$1"	
	case $scrape_type in
		youtube|Y) search_is_empty && get_search; scrape_youtube  "$search" "$ytfzf_video_json_file" "search";;
		youtube-trending|T) scrape_youtube  "$search" "$ytfzf_video_json_file" "trending";;
		youtube-subscriptions|S)#{{{
		    if ! [ -f "$YTFZF_SUBSCRIPTIONS_FILE" ]; then
			    print_info "subcription file doesn't exist\n"
			    exit 1
		    fi

		    #if _tmp_subfile does not have a unique name, weird things happen
		    i=0
		    while IFS= read channel_url || [ -n "$channel_url" ] ; do
			    i=$((i+1))
			    {
				    _tmp_subfile="${session_temp_dir}/channel-$i"
				    scrape_youtube "$channel_url" "$_tmp_subfile" "channel" < /dev/null
				    jq '.[0:'"$sub_link_count"']' < "$_tmp_subfile" >> "$ytfzf_video_json_file"
			    } &
			    sleep 0.01
		    done <<- EOF
		    $(sed \
		    -e "s/#.*//" \
		    -e "/^[[:space:]]*$/d" \
		    -e "s/[[:space:]]*//g" \
		    "$YTFZF_SUBSCRIPTIONS_FILE" )
		EOF
		    wait
		    ;;#}}}
		peertube|P) search_is_empty && get_search; scrape_peertube "$search" "$ytfzf_video_json_file" ;;
		odysee|lbry|O) search_is_empty && get_search; scrape_odysee "$search" "$ytfzf_video_json_file" ;;
		'') return 1;; #stops the while loop
                *)
                        #custom scrapers {{{
			#if the file doesn't exist, it will exit with code 127
			set -- $(eval printf '"%s"' $custom_scraper_variables)
			"${YTFZF_CUSTOM_SCRAPERS_DIR}/${scrape_type}" "$search" "$ytfzf_video_json_file" "$@" 2>/dev/null
			case "$?" in
				126) die $? "$scrape_type does not have execute permissions\n";;
				127) die 1 "invalid scraper: $scrape_type\n" ;;
			esac
                        #}}}
	esac
	unset scrape_type
	return 0
}

#the while loop will be infinite without this
scrape="$scrape,"
while scrape_website "${scrape%%,*}"; do
	scrape="${scrape#*,}"
done

while :; do
	case 1 in
		 "$is_interface_scripting") interface_scripting "$ytfzf_video_json_file" "$ytfzf_selected_ids" ;;
		"$show_thumbnails") interface_thumbnails "$ytfzf_video_json_file" "$ytfzf_selected_ids" ;;
		    "$is_ext_menu") interface_external   "$ytfzf_video_json_file" "$ytfzf_selected_ids" ;;
				 1) interface_text       "$ytfzf_video_json_file" "$ytfzf_selected_ids" ;;
	esac

	player "$ytfzf_video_json_file" "$ytfzf_selected_ids"
	[ $is_loop -eq 0 ] || [ ! -s "$ytfzf_selected_ids" ] && break
done
#}}}

# vim:foldmethod=marker
