#!/bin/sh

# vim:foldmethod=marker

# Scraping: query -> video json
# User Interface: video json -> user selection -> ID
# Player: ID -> video player

# Global Variables {{{
: ${useragent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Safari/537.36'}
# }}}

# Scraping {{{
# * a scraper function takes a search query as $1 and returns video json to stdout
# * argument 2 and above are undefined and can be used for filters
# * return codes:
#            1 : no response from site

# Json keys:
#	Needed:
#	ID url title
#	Optional:
#	thumbs channel duration views date description


## Youtube {{{
# * get youtube search html and extract the json
# * parse the json

scrape_youtube () {
	query=$1
	scraped_json=$(mktemp)

	{
		# Get search query from youtube
		curl 'https://www.youtube.com/results' -s -L \
		  -G --data-urlencode "search_query=$query" \
		  -H 'Authority: www.youtube.com' \
		  -H "User-Agent: $useragent" \
		  -H 'Accept-Language: en-US,en;q=0.9' \
		  --compressed 
	} | {
		# Separates the json embedded in the youtube html page
		# * removes the content after ytInitialData
		# * removes all newlines and trims the json out
		sed -n '/var *ytInitialData/,$p' |
			tr -d '\n' |
			sed -E ' s_^.*var ytInitialData ?=__ ; s_;</script>.*__ ;'
	} > "$scraped_json"
		
	# Parse the json to the required keys
	{ 
		# Playlists
		jq '[ .contents|
		..|.playlistRenderer? |
		select(. !=null) |
			{
				ID: .playlistId,
				url: "https://www.youtube.com/playlist?list=\(.playlistId)",
				title: "[Playlist] \(.title.simpleText)",
				thumbs: .thumbnails[0].thumbnails[0].url,
				channel: .longBylineText.runs[0].text,
				duration: "\(.videoCount) videos",
				views: "playlist",
				date: "playlist"
			}
		]'
	} < "$scraped_json"

	{ 
		# Videos
		jq '[ .contents|
		..|.videoRenderer? |
		select(. !=null) |
			{
				ID: .videoId,
				url: "https://www.youtube.com/watch?v=\(.videoId)",
				title: .title.runs[0].text,
				thumbs: .thumbnail.thumbnails[0].url,
				channel: .longBylineText.runs[0].text,
				duration:.lengthText.simpleText,
				views: .shortViewCountText.simpleText,
				date: .publishedTimeText.simpleText,
				description: .detailedMetadataSnippets[0].snippetText.runs[0].text
			}
		]'
	} < "$scraped_json"

	rm "$scraped_json"
}
## }}}

# }}}

# Data handling {{{
# 	Given ID ($1) of a video it returns it's json
get_object () {
	_ID=$1
	jq '.[]|select( .videoID == "'"$_ID"'")'
}
# }}}

# User Interface {{{
# Takes video json file as $1 and returns the selected video IDs

interface_text() {
	: # TODO
}

# Takes video json file and downloads the thumnails as ${ID}.png to the thumbs_dir
download_thumbnails() {
	: # TODO
}
interface_thumbnails() {
	: # TODO
}
# }}}
